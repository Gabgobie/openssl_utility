# OpenSSL ECC configuration file.

[ default ]
# variables
algorithm         = prime256v1
md                = sha256
TLD               = localdomain
bits              = 4096
root_days         = 36500
interoot_days     = 3650
intermediate_days = 365
leaf_days         = 90

[ ca ]
# `man ca`
default_ca = Intermediate_CA


[ Root_CA ]
# Directory and file locations. This one is used to sign leaf certs.
dir               = ./${TLD}_${algorithm}/${TLD}_Root_CA
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand
crlnumber         = $dir/crlnumber

default_crl_days  = $interoot_days
default_days      = $interoot_days

private_key       = $dir/private/${TLD}_Root_CA_${algorithm}.key.pem
certificate       = $dir/certs/${TLD}_Root_CA_${algorithm}.cert.pem
crl               = $dir/crl/${TLD}_Root_CA_${algorithm}.crl.pem

# For certificate revocation lists.
crl_extensions    = crl_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = ${md}

name_opt          = multiline
cert_opt          = ca_default
preserve          = no
policy            = policy_loose

copy_extensions   = none

x509_extensions   = v3_Root_CA

[ Interoot_CA ]
# Directory and file locations. This one is used to sign intermediate ca certs.
dir               = ./${TLD}_${algorithm}/${TLD}_Interoot_CA
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand
crlnumber         = $dir/crlnumber

default_crl_days  = $intermediate_days
default_days      = $intermediate_days

private_key       = $dir/private/${TLD}_Interoot_CA_${algorithm}.key.pem
certificate       = $dir/certs/${TLD}_Interoot_CA_${algorithm}.cert.pem
crl               = $dir/crl/${TLD}_Interoot_CA_${algorithm}.crl.pem

# For certificate revocation lists.
crl_extensions    = crl_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = ${md}

name_opt          = multiline
cert_opt          = ca_default
preserve          = no
policy            = policy_loose

copy_extensions   = none

x509_extensions   = v3_Interoot_CA

[ Intermediate_CA ]
# Directory and file locations. This one is used to sign leaf certs.
dir               = ./${TLD}_${algorithm}/${TLD}_Intermediate_CA
certs             = $dir/certs
crl_dir           = $dir/crl
new_certs_dir     = $dir/newcerts
database          = $dir/index.txt
serial            = $dir/serial
RANDFILE          = $dir/private/.rand
crlnumber         = $dir/crlnumber

default_crl_days  = $leaf_days
default_days      = $leaf_days

private_key       = $dir/private/${TLD}_Intermediate_CA_${algorithm}.key.pem
certificate       = $dir/certs/${TLD}_Intermediate_CA_${algorithm}.cert.pem
crl               = $dir/crl/${TLD}_Intermediate_CA_${algorithm}.crl.pem

# For certificate revocation lists.
crl_extensions    = crl_ext

# SHA-1 is deprecated, so use SHA-2 instead.
default_md        = ${md}

name_opt          = multiline
cert_opt          = ca_default
preserve          = no
policy            = policy_loose

copy_extensions   = none

x509_extensions   = v3_Intermediate_CA

[ policy_strict ]
# The root CA should only sign intermediate certificates that match.
# See the POLICY FORMAT section of `man ca`.
countryName             = match
stateOrProvinceName     = match
organizationName        = match
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ policy_loose ]
# Allow the intermediate CA to sign a more diverse range of certificates.
# See the POLICY FORMAT section of the `ca` man page.
countryName             = optional
stateOrProvinceName     = optional
localityName            = optional
organizationName        = optional
organizationalUnitName  = optional
commonName              = supplied
emailAddress            = optional

[ req ]
# Default options for the `req` tool (`man req`).
default_bits        = ${bits}
distinguished_name  = req_distinguished_name
string_mask         = utf8only

# SHA-1 is deprecated, so use SHA-2 instead.
default_md          = ${md}

# Extension to add when the -x509 option is used.
x509_extensions     = server_cert

[ req_distinguished_name ]
# See <https://en.wikipedia.org/wiki/Certificate_signing_request>.
countryName                     = Country Name (2 letter code)
stateOrProvinceName             = State or Province Name
localityName                    = Locality Name
0.organizationName              = Organization Name
organizationalUnitName          = Organizational Unit Name
commonName                      = Common Name
emailAddress                    = Email Address

# Optionally, specify some defaults.
countryName_default             = 
stateOrProvinceName_default     = 
localityName_default            = 
0.organizationName_default      = 
organizationalUnitName_default  = 
commonName_default              = $ENV::exported_CN $algorithm
emailAddress_default            = certmaster@${TLD}

[ v3_Root_CA ]
# Erweiterungen f√ºr eine Root-CA
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer
basicConstraints                = critical, CA:TRUE, pathlen:2
keyUsage                        = critical, keyCertSign, cRLSign

[ v3_Interoot_CA ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier            = hash
authorityKeyIdentifier          = keyid:always,issuer
basicConstraints                = critical, CA:true, pathlen:1
keyUsage                        = critical, keyCertSign, cRLSign

[ v3_Intermediate_CA ]
# Extensions for a typical intermediate CA (`man x509v3_config`).
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid:always,issuer
basicConstraints = critical, CA:true, pathlen:0
keyUsage = critical, keyCertSign, cRLSign, digitalSignature

[ usr_cert ]
# Extensions for client certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = client, email
nsComment = "OpenSSL Generated Client Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, nonRepudiation, digitalSignature, keyEncipherment
extendedKeyUsage = clientAuth, emailProtection

[ server_cert ]
# Extensions for server certificates (`man x509v3_config`).
basicConstraints = CA:FALSE
nsCertType = server
nsComment = "OpenSSL Generated Server Certificate"
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer:always
keyUsage = critical, digitalSignature, keyEncipherment
extendedKeyUsage = serverAuth

[ crl_ext ]
# Extension for CRLs (`man x509v3_config`).
authorityKeyIdentifier=keyid:always

[ ocsp ]
# Extension for OCSP signing certificates (`man ocsp`).
basicConstraints = CA:FALSE
subjectKeyIdentifier = hash
authorityKeyIdentifier = keyid,issuer
keyUsage = critical, digitalSignature
extendedKeyUsage = critical, OCSPSigning